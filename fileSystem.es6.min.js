class FileSystem{async readFileAsDataURL(e){return this.readFile(e,"blob",(e,t)=>{e.readAsDataURL(t)})}async readFile(e,t="text",n){return this.readFromSource(e,t,n)}async readFromSource(e,t,n){return new Promise(async(r,o)=>{if(window.fetch)try{const a=await fetch(e),s=await a[t]();r(s)}catch(e){o("Failed to read source")}else{const a=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");a.open("GET",e,!0),a.responseType=t,a.onload=function(){const e=new FileReader;n(e,a.response),e.onload=function(e){r(e.target.result)},e.onerror=function(){o("Failed to read source")}},a.onerror=function(){o("Failed to read source")},a.send(null)}})}createFile(e,t,n){const r=new Blob([e],{type:t}),o=this.createObjectURL(r);this.downloadFile(o,n)}createObjectURL(e){const t=window.URL||window.webkitURL;return t.createObjectURL(e)}downloadFile(e,t){const n=document.createElement("a");n.setAttribute("href",e),n.setAttribute("download",t),n.click(),n.remove(),this.revokeObjectURL(e)}revokeObjectURL(e){const t=window.URL||window.webkitURL;t.revokeObjectURL(e)}}
