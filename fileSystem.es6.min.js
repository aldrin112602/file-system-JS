class FileSystem{async readFileAsDataURL(e){return new Promise(async(t,n)=>{const r=new FileReader();if(e instanceof Blob||e instanceof File)r.readAsDataURL(e);else if(window.fetch)try{const o=await fetch(e),s=await o.blob();r.readAsDataURL(s)}catch(e){n("Failed to read file")}else{const o=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");o.open("GET",e,!0),o.responseType="blob",o.onload=function(){r.readAsDataURL(o.response)},o.onerror=function(){n("Failed to read file")},o.send(null)}r.onload=function(e){t(e.target.result)},r.onerror=function(){n("Failed to read file")}})}async readFile(e){return new Promise(async(t,n)=>{if(window.fetch)try{const r=await fetch(e),o=await r.text();t(o)}catch(e){n(e)}else{const r=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");r.open("GET",e,!0),r.responseType="text",r.onload=function(){t(r.response)},r.onerror=function(){n("Failed to read file")},r.send(null)}})}createFile(e,t,n){const r=new Blob([e],{type:t}),o=window.URL||window.webkitURL,s=o.createObjectURL(r),a=document.createElement("a");a.setAttribute("href",s),a.setAttribute("download",n),a.click(),a.remove(),o.revokeObjectURL(s)}
